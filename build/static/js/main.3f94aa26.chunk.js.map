{"version":3,"sources":["сomponents/Game/helper.ts","сomponents/Game/styles.ts","сomponents/Game/assets/cell1.svg","сomponents/Game/assets/cell2.svg","сomponents/Game/assets/cell3.svg","сomponents/Game/Board.tsx","сomponents/Game/GamePlay.tsx","App.js","index.js"],"names":["DirectionsOfGeneration","game","display","flexDirection","justifyContent","alignItems","minHeight","overflowY","gameBoard","flexWrap","padding","height","wrapButton","maxWidth","marginLeft","buttonStyles","position","backgroundColor","margin","wrapShip","size","cellSize","shipsSet","quantity","randomMovesComp","checkShipsLength3","arr","x","y","drawCell","context","beginPath","strokeStyle","strokeRect","closePath","cellIsEngaged","cell","engagedCells","some","fillCell","rect","fillStyle","fill","stroke","drawPastCells","pastCells","forEach","arc","Math","PI","getRundomCell","dimMatr","currentSize","ship","shipHead","round","random","push","drawSunkenShips","sunkenShips","moveTo","lineTo","fillRect","cellIsWithin","getEngagedCellsAroundShip","array","engagedCellsAroundShip","shipCell","length","filter","element1","index","findIndex","element2","engagedCell","generateShipsLayout","directionOfGeneration","ships","directionsOfGeneration","i","Object","keys","map","direction","sort","d1","d2","secondShipCell","pop","Left","Up","Right","Down","nextShipCell","currentPlayer","timeClickComp","Board","name","nameBoard","gameIsFinished","playerShips","compShips","coords","useState","sunkenShipsPlayer","setSunkenShipsPlayer","sunkenShipsComp","setSunkenShipsComp","pastCellsPlayer","setPastCellsPlayer","pastCellsComp","setPastCellsComp","allPlayerShips","flat","allCompShips","countPlayerShips","setCountPlayerShips","countCompShips","setCountCompShips","canvasRef","useRef","useEffect","localRef","current","getContext","scale","handleComp","useCallback","rand","engagedCompShot","find","el","undefined","generateRandomCompShot","clearRect","drawCells","font","fillText","drawNameBoard","drawLatterCoords","letterCoords","drawNumberCoords","numberCoords","str","drawWhoWin","num","drawStatusShips","drawShips","drawGrid","addEventListener","removeEventListener","id","setInterval","clearInterval","ref","style","cursor","marginBottom","width","canvasWidth","canvasHeight","onClick","event","coorX","coorY","nativeEvent","offsetX","offsetY","ceil","memo","Game","setPlayerShips","setCompShips","setGameIsFinished","useMemo","cellCount","String","fromCharCode","generateCoords","Container","sx","Box","component","src","cell1","alt","Typography","textAlign","cell2","cell3","Button","document","location","reload","prevGameIsFinished","variant","App","className","rootElement","getElementById","render"],"mappings":"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","file":"static/js/main.3f94aa26.chunk.js","sourcesContent":["import {\n  ShipsSet,\n  CellArgs,\n  DrawCellArgs,\n  DrawCellsArgs,\n  GeneratedCoords,\n  CellIsEngagedArgs,\n  CellIsWithinArgs,\n} from \"./types\";\n\nexport enum DirectionsOfGeneration {\n  Left = \"Left\",\n  Up = \"Up\",\n  Right = \"Right\",\n  Down = \"Down\",\n}\n\nexport const size = 300; // размер всей сетки при изм-и надо менять style numberCoords\nexport const dimMatr = 8; // Matrix dimension 8x8 (размерность)\nexport const cellSize = size / dimMatr; //размер ячейки\nexport const scaleBoard = 1; //масшатаб игрового поля\nexport const canvasWidth = size + 70; //ширина всего канваса\nexport const canvasHeight = size + 100; //высота всего канваса\n\nexport const shipsSet: ShipsSet[] = [\n  //размеры кораблей и их количество на доске\n  // последовательность строго c size =3 и на уменьшение!!!!\n  { size: 3, quantity: 1 },\n  { size: 2, quantity: 2 },\n  { size: 1, quantity: 3 },\n];\n\nconst randomMovesComp: CellArgs[] = []; //рандомные ходы компьютера\n\n//проверка трехбалубных яхт идущих исключительно вначале shipsSet!!!!!\nexport const checkShipsLength3 = (arr: CellArgs[][]): boolean =>\n  arr[0][2].x === arr[0][0].x && arr[0][2].y === arr[0][0].y ? true : false;\n\n//рисовать ячейку\nconst drawCell = ({ context, cellSize, x, y }: DrawCellArgs): void => {\n  context.beginPath();\n  context.strokeStyle = \"#aaa\";\n  context.strokeRect(x * cellSize, y * cellSize, cellSize, cellSize);\n  context.closePath();\n};\n\n//рисовать имя доски\nexport const drawNameBoard = (\n  context: CanvasRenderingContext2D,\n  font: string\n): void => {\n  context.beginPath();\n  context.clearRect(0, 340, 300, 60);\n  context.rect(0, 340, 300, 60);\n  context.fillStyle = \"burlywood\";\n  context.fill();\n  context.fillStyle = \"blue\";\n  context.font = \"italic \" + 12 + \"pt Arial\";\n  context.fillText(`${font}`, 40, 360);\n  context.closePath();\n};\n\n//генерировать координаты\nexport const generateCoords = (cellCount: number): GeneratedCoords => {\n  const letterCoords = [];\n  const numberCoords = [];\n\n  for (let i = 1; i <= cellCount; i++) {\n    letterCoords.push(String.fromCharCode(64 + i));\n    numberCoords.push(i);\n  }\n\n  return { letterCoords, numberCoords };\n};\n\n//прорисовать координаты букв сетки\nexport const drawLatterCoords = (\n  context: CanvasRenderingContext2D,\n  font: string[]\n): void => {\n  let i = 15;\n  context.beginPath();\n  context.fillStyle = \"blue\";\n  context.font = \"italic \" + 12 + \"pt Arial\";\n  font.forEach((el) => {\n    context.fillText(`${el}`, i, 320);\n    i += 37;\n  });\n  context.closePath();\n};\n\n//прорисовать координаты чисел сетки\nexport const drawNumberCoords = (\n  context: CanvasRenderingContext2D,\n  font: number[]\n): void => {\n  let i = 24;\n  context.beginPath();\n  context.fillStyle = \"blue\";\n  context.font = \"italic \" + 13 + \"pt Arial\";\n  font.forEach((el) => {\n    context.fillText(`${el}`, 306, i);\n    i += 38;\n  });\n  context.closePath();\n};\n\n//прорисовать количесвто оставшихся к уничтожению\nexport const drawStatusShips = (\n  context: CanvasRenderingContext2D,\n  name: string,\n  countCompShips?: number,\n  countPlayerShips?: number\n): void => {\n  const num = name === \"computer\" ? countCompShips : countPlayerShips;\n\n  context.beginPath();\n  context.fillStyle = \"blue\";\n  context.font = \"italic \" + 11 + \"pt Arial\";\n  context.fillText(`Осталось уничтожить: ${num}`, 10, 395);\n  context.closePath();\n};\n\n//прорисовать кто победюн\nexport const drawWhoWin = (\n  context: CanvasRenderingContext2D,\n  name: string,\n  countCompShips?: number,\n  countPlayerShips?: number\n): void => {\n  const str =\n    name === \"computer\"\n      ? countCompShips === 0 && \"Вы победитель!!!\"\n      : countPlayerShips === 0 && \"Компутер красавчик!!!\";\n  if (!str) return;\n  context.beginPath();\n  context.clearRect(0, 340, 300, 60);\n  context.rect(0, 340, 300, 60);\n  context.fillStyle = \"burlywood\";\n  context.fill();\n  context.fillStyle = \"rgb(158, 0, 0)\";\n  context.font = \"italic \" + 20 + \"pt Arial\";\n  context.fillText(`${str}`, 10, 370);\n  context.closePath();\n};\n\n// рисовать ячейки\nexport const drawCells = ({\n  context,\n  cellSize,\n  dimMatr,\n}: DrawCellsArgs): void => {\n  for (let x = 0; x < dimMatr; x++) {\n    for (let y = 0; y < dimMatr; y++) {\n      drawCell({ context, cellSize, x, y });\n    }\n  }\n};\n\n// Ячейка занята\nexport const cellIsEngaged = ({\n  cell,\n  engagedCells,\n}: CellIsEngagedArgs): boolean =>\n  engagedCells &&\n  engagedCells.some(({ x, y }: CellArgs) => x === cell.x && y === cell.y);\n\n// заполнить ячейку\nconst fillCell = ({ context, cellSize, x, y }: DrawCellArgs): void => {\n  context.beginPath();\n  context.rect((x - 1) * cellSize, (y - 1) * cellSize, cellSize, cellSize);\n  context.closePath();\n  context.fillStyle = \"#ddd\";\n  context.fill();\n  context.stroke();\n};\n\n//рисовать корабли\nexport const drawShips = (\n  context: CanvasRenderingContext2D,\n  cellSize: number,\n  ships: CellArgs[][]\n): void => {\n  ships &&\n    ships.flat().forEach(({ x, y }) => fillCell({ context, cellSize, x, y }));\n};\n\n//нарисовать ячейку мимо\nexport const drawPastCells = (\n  context: CanvasRenderingContext2D,\n  cellSize: number,\n  pastCells: CellArgs[]\n): void => {\n  pastCells &&\n    pastCells.forEach(({ x, y }) => {\n      context.beginPath();\n      context.arc(\n        x * cellSize - cellSize / 2,\n        y * cellSize - cellSize / 2,\n        4,\n        0,\n        2 * Math.PI\n      );\n      context.fillStyle = \"rgb(57, 57, 97)\";\n      context.stroke();\n      context.fill();\n      context.closePath();\n    });\n};\n\n//генерация рандома ячеек\nconst getRundomCell = (size: number, dimMatr: number): any[] => {\n  let currentSize = 1;\n  const ship = [];\n  let shipHead = {};\n\n  while (currentSize <= size) {\n    shipHead = {\n      x: Math.round(Math.random() * (dimMatr - 1) + 1),\n      y: Math.round(Math.random() * (dimMatr - 1) + 1),\n    };\n\n    ship.push(shipHead);\n    currentSize++;\n  }\n\n  return ship;\n};\n\n//рандом-генерация кнопки, для произведения \"выстрела\" компьютером\nexport const generateRandomCompShot = (): CellArgs => {\n  let i = 0;\n  let rand = getRundomCell(1, dimMatr)[0];\n\n  //проверка на отсутсвие элемента в глобальном randomMovesComp\n  const engagedCompShot = randomMovesComp\n    .map(({ x, y }) => x === rand.x && y === rand.y)\n    .find((el) => el === true);\n\n  while (engagedCompShot !== undefined && engagedCompShot === true && i < 1) {\n    randomMovesComp.pop();\n    rand = getRundomCell(1, dimMatr)[0];\n    i++;\n  }\n\n  randomMovesComp.push(rand); //необходимо запоминать ранее произведенные \"выстрелы\"\n\n  return rand;\n};\n\n//затонувшие корабли\nexport const drawSunkenShips = (\n  context: CanvasRenderingContext2D,\n  cellSize: number,\n  sunkenShips: CellArgs[]\n): void => {\n  sunkenShips &&\n    sunkenShips.forEach(({ x, y }) => {\n      fillCell({ context, cellSize, x, y });\n\n      context.beginPath();\n      context.moveTo((x - 1) * cellSize, (y - 1) * cellSize);\n      context.lineTo(x * cellSize, y * cellSize);\n      context.moveTo((x - 1) * cellSize + cellSize, (y - 1) * cellSize);\n      context.lineTo(x * cellSize - cellSize, y * cellSize);\n      context.strokeStyle = \"blue\";\n      context.fillStyle = \"rgb(255, 82, 82)\";\n      context.fillRect(\n        (x - 1) * cellSize,\n        (y - 1) * cellSize,\n        cellSize,\n        cellSize\n      );\n      context.stroke();\n      context.closePath();\n    });\n};\n\n//создает ячейку\nexport const getCell = (coorX: number, coorY: number): CellArgs => {\n  return {\n    x: Math.ceil(coorX / cellSize / scaleBoard),\n    y: Math.ceil(coorY / cellSize / scaleBoard),\n  };\n};\n\n//ячейка внутри сетки\nconst cellIsWithin = ({\n  cell,\n  dimMatr,\n}: CellIsWithinArgs): boolean => //ячейка внутри\n  cell.x > 0 && cell.x <= dimMatr && cell.y > 0 && cell.y <= dimMatr;\n\n//удалить дубликаты\nconst removeDuplicates = (array: CellArgs[]): CellArgs[] =>\n  array.filter(\n    (element1: CellArgs, index: number, array: CellArgs[]) =>\n      index ===\n      array.findIndex(\n        (element2: CellArgs) =>\n          element2.x === element1.x && element2.y === element1.y\n      )\n  );\n\n// ячейки вокруг корабля\nexport const getEngagedCellsAroundShip = (\n  ship: CellArgs[],\n  engagedCells: CellArgs[],\n  dimMatr: number\n): CellArgs[] => {\n  const engagedCellsAroundShip: CellArgs[] = [];\n\n  for (let shipCell = 0; shipCell < ship.length; shipCell++) {\n    engagedCellsAroundShip.push({ x: ship[shipCell].x, y: ship[shipCell].y });\n    engagedCellsAroundShip.push({\n      x: ship[shipCell].x - 1,\n      y: ship[shipCell].y - 1,\n    });\n    engagedCellsAroundShip.push({\n      x: ship[shipCell].x,\n      y: ship[shipCell].y - 1,\n    });\n    engagedCellsAroundShip.push({\n      x: ship[shipCell].x + 1,\n      y: ship[shipCell].y - 1,\n    });\n    engagedCellsAroundShip.push({\n      x: ship[shipCell].x + 1,\n      y: ship[shipCell].y,\n    });\n    engagedCellsAroundShip.push({\n      x: ship[shipCell].x + 1,\n      y: ship[shipCell].y + 1,\n    });\n    engagedCellsAroundShip.push({\n      x: ship[shipCell].x,\n      y: ship[shipCell].y + 1,\n    });\n    engagedCellsAroundShip.push({\n      x: ship[shipCell].x - 1,\n      y: ship[shipCell].y + 1,\n    });\n    engagedCellsAroundShip.push({\n      x: ship[shipCell].x - 1,\n      y: ship[shipCell].y,\n    });\n  }\n\n  return removeDuplicates(engagedCellsAroundShip).filter(\n    (engagedCell: CellArgs) =>\n      cellIsWithin({ cell: engagedCell, dimMatr }) &&\n      !cellIsEngaged({ cell: engagedCell, engagedCells })\n  );\n};\n\n//генерировать схему кораблей\nexport const generateShipsLayout = (\n  shipsSet: ShipsSet[],\n  dimMatr: number\n): CellArgs[][] => {\n  const ships: CellArgs[][] = [];\n  const engagedCells: CellArgs[] = [];\n  let directionOfGeneration: DirectionsOfGeneration;\n  let directionsOfGeneration: DirectionsOfGeneration[] = [];\n\n  shipsSet.forEach(({ size, quantity }: ShipsSet) => {\n    for (let i = 1; i <= quantity; i++) {\n      let ship: CellArgs[] = [];\n      let currentSize = 1;\n\n      while (currentSize <= size) {\n        if (currentSize === 1) {\n          ship = [];\n          directionsOfGeneration = Object.keys(DirectionsOfGeneration)\n            .map((direction) => ({ sort: Math.random(), direction }))\n            .sort((d1, d2) => d1.sort - d2.sort)\n            .map(({ direction }) => direction as DirectionsOfGeneration);\n          let shipHead: CellArgs = {} as CellArgs;\n\n          do {\n            shipHead = {\n              x: Math.round(Math.random() * (dimMatr - 1) + 1),\n              y: Math.round(Math.random() * (dimMatr - 1) + 1),\n            };\n          } while (cellIsEngaged({ cell: shipHead, engagedCells }));\n\n          ship.push(shipHead);\n          currentSize++;\n        } else if (currentSize === 2) {\n          let secondShipCell: CellArgs = {} as CellArgs;\n\n          do {\n            /// @ts-ignore - no undefined!!!!\n            directionOfGeneration = directionsOfGeneration.pop();\n\n            switch (directionOfGeneration) {\n              case DirectionsOfGeneration.Left: {\n                const shipCell: CellArgs = { x: ship[0].x - 1, y: ship[0].y };\n\n                if (\n                  cellIsWithin({ cell: shipCell, dimMatr }) &&\n                  !cellIsEngaged({ cell: shipCell, engagedCells })\n                ) {\n                  secondShipCell = shipCell;\n                }\n                break;\n              }\n              case DirectionsOfGeneration.Up: {\n                const shipCell: CellArgs = { x: ship[0].x, y: ship[0].y - 1 };\n\n                if (\n                  cellIsWithin({ cell: shipCell, dimMatr }) &&\n                  !cellIsEngaged({ cell: shipCell, engagedCells })\n                ) {\n                  secondShipCell = shipCell;\n                }\n                break;\n              }\n              case DirectionsOfGeneration.Right: {\n                const shipCell: CellArgs = { x: ship[0].x + 1, y: ship[0].y };\n\n                if (\n                  cellIsWithin({ cell: shipCell, dimMatr }) &&\n                  !cellIsEngaged({ cell: shipCell, engagedCells })\n                ) {\n                  secondShipCell = shipCell;\n                }\n                break;\n              }\n              case DirectionsOfGeneration.Down: {\n                const shipCell: CellArgs = { x: ship[0].x, y: ship[0].y + 1 };\n\n                if (\n                  cellIsWithin({ cell: shipCell, dimMatr }) &&\n                  !cellIsEngaged({ cell: shipCell, engagedCells })\n                ) {\n                  secondShipCell = shipCell;\n                }\n                break;\n              }\n            }\n          } while (\n            Object.keys(secondShipCell).length &&\n            directionsOfGeneration.length\n          );\n\n          if (Object.keys(secondShipCell).length) {\n            ship.push(secondShipCell);\n            currentSize++;\n          } else {\n            currentSize = 1;\n          }\n        } else {\n          let nextShipCell: CellArgs = {} as CellArgs;\n\n          switch (directionOfGeneration) {\n            case DirectionsOfGeneration.Left: {\n              const shipCell: CellArgs = {\n                x: ship[currentSize - 1 - 1].x - 1,\n                y: ship[currentSize - 1 - 1].y,\n              };\n\n              if (\n                cellIsWithin({ cell: shipCell, dimMatr }) &&\n                !cellIsEngaged({ cell: shipCell, engagedCells })\n              ) {\n                nextShipCell = shipCell;\n              }\n              break;\n            }\n            case DirectionsOfGeneration.Up: {\n              const shipCell: CellArgs = {\n                x: ship[currentSize - 1 - 1].x,\n                y: ship[currentSize - 1 - 1].y - 1,\n              };\n\n              if (\n                cellIsWithin({ cell: shipCell, dimMatr }) &&\n                !cellIsEngaged({ cell: shipCell, engagedCells })\n              ) {\n                nextShipCell = shipCell;\n              }\n              break;\n            }\n            case DirectionsOfGeneration.Right: {\n              const shipCell: CellArgs = {\n                x: ship[currentSize - 1 - 1].x + 1,\n                y: ship[currentSize - 1 - 1].y,\n              };\n\n              if (\n                cellIsWithin({ cell: shipCell, dimMatr }) &&\n                !cellIsEngaged({ cell: shipCell, engagedCells })\n              ) {\n                nextShipCell = shipCell;\n              }\n              break;\n            }\n            case DirectionsOfGeneration.Down: {\n              const shipCell: CellArgs = {\n                x: ship[currentSize - 1 - 1].x,\n                y: ship[currentSize - 1 - 1].y + 1,\n              };\n\n              if (\n                cellIsWithin({ cell: shipCell, dimMatr }) &&\n                !cellIsEngaged({ cell: shipCell, engagedCells })\n              ) {\n                nextShipCell = shipCell;\n              }\n              break;\n            }\n          }\n\n          if (Object.keys(nextShipCell).length) {\n            ship.push(nextShipCell);\n            currentSize++;\n          } else {\n            currentSize = 1;\n          }\n        }\n      }\n\n      const engagedCellsAroundShip: CellArgs[] = getEngagedCellsAroundShip(\n        ship,\n        engagedCells,\n        dimMatr\n      );\n\n      engagedCells.push(...engagedCellsAroundShip);\n      ships.push(ship);\n    }\n  });\n\n  return ships;\n};\n\n//время игры\nexport const getAllTimeGame = (x: number): string => {\n  const y = (Math.round(((Date.now() - x) / 1000 / 60) * 100) / 100)\n    .toString()\n    .split(\".\");\n  y[1] = y[1].length === 1 ? `0${y[1]}` : y[1];\n  return y.join(\":\");\n};\n","export const game = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  minHeight: \"100vh\",\n  overflowY: \"auto\",\n};\n\nexport const gameBoard = {\n  display: \"flex\",\n  alignItems: \"flex-end\",\n  justifyContent: \"flex-start\",\n  flexWrap: \"wrap\",\n  padding: \"10px\",\n  height: \"28rem\",\n};\n\nexport const wrapButton = {\n  maxWidth: \"47rem\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  padding: \"5px\",\n  justifyContent: \"center\",\n  alignItems: \"stretch\",\n  minHeight: \"100%\",\n  marginLeft: \"1rem\",\n};\n\nexport const buttonStyles = {\n  position: \"static\",\n  backgroundColor: \"#000\",\n  margin: 0,\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n};\n\nexport const wrapShip = {\n  display: \"flex\",\n  flexDirection: \"column\",\n};\n","export default __webpack_public_path__ + \"static/media/cell1.350a4099.svg\";","export default __webpack_public_path__ + \"static/media/cell2.de22f9f4.svg\";","export default __webpack_public_path__ + \"static/media/cell3.6fcc0c3d.svg\";","import {\n  useState,\n  useEffect,\n  useRef,\n  useCallback,\n  RefObject,\n  ReactElement,\n  memo,\n} from \"react\";\n\nimport {\n  drawCells,\n  drawShips,\n  drawSunkenShips,\n  drawPastCells,\n  cellIsEngaged,\n  getCell,\n  size,\n  dimMatr,\n  cellSize,\n  scaleBoard,\n  generateRandomCompShot,\n  drawNameBoard,\n  drawLatterCoords,\n  drawNumberCoords,\n  drawWhoWin,\n  drawStatusShips,\n  canvasWidth,\n  canvasHeight,\n  // getAllTimeGame,\n} from \"./helper\";\n\nimport { CellArgs, BoardProps } from \"./types\";\n\nlet currentPlayer = \"player\"; //За кем текущий ход\n// let startTime: number; // время начала игры\nlet timeClickComp = 700; // время реакции компа\n\nconst Board = ({\n  name,\n  nameBoard,\n  gameIsFinished,\n  playerShips,\n  compShips,\n  coords,\n}: BoardProps): ReactElement => {\n  const [sunkenShipsPlayer, setSunkenShipsPlayer] = useState<CellArgs[]>([]); //затонувшие корабли player\n  const [sunkenShipsComp, setSunkenShipsComp] = useState<CellArgs[]>([]); //затонувшие корабли comp\n\n  const [pastCellsPlayer, setPastCellsPlayer] = useState<CellArgs[]>([]); // клетки мимо игрока\n  const [pastCellsComp, setPastCellsComp] = useState<CellArgs[]>([]); // клетки мимо компа\n\n  const allPlayerShips = playerShips && playerShips.flat().length;\n  const allCompShips = compShips && compShips.flat().length;\n\n  const [countPlayerShips, setCountPlayerShips] = useState(allPlayerShips); //Количество кораблей для уничтожения\n  const [countCompShips, setCountCompShips] = useState(allCompShips); //Количество кораблей для уничтожения\n\n  // const [lossPlayer, setLossPlayer] = useState(0); //количество проигрышей игрока\n  // const [winPlayer, setWinPlayer] = useState(0); //количество выигрышей игрока\n  // const [timeGame, setTimeGame] = useState(\"\"); // время игры\n\n  // useEffect(() => {//для дальнейшей реализации создания рейтинга на основе времени и выиграшей\n  //   startTime = Date.now();\n  // }, []);\n\n  // useEffect(() => {\n  //   if (countCompShips === 0 || countPlayerShips === 0)\n  //     setTimeGame(getAllTimeGame(startTime));\n  //   if (countCompShips === 0) {\n  //     setWinPlayer(winPlayer + 1);\n  //   }\n  //   if (countPlayerShips === 0) {\n  //     setLossPlayer(lossPlayer + 1);\n  //   }\n  // }, [countCompShips, countPlayerShips]);\n\n  const canvasRef: RefObject<HTMLCanvasElement> =\n    useRef<HTMLCanvasElement | null>(null);\n\n  useEffect(() => {\n    // масштаб\n    let localRef = null;\n    if (canvasRef.current) localRef = canvasRef.current;\n    const context: CanvasRenderingContext2D | null = localRef!.getContext(\"2d\");\n    context?.scale(scaleBoard, scaleBoard);\n  }, []);\n\n  const handleComp = useCallback(() => {\n    //комп\n    if (countCompShips === 0 || countPlayerShips === 0) return;\n    if (currentPlayer === name) return; //если текущий ход равен глобальному currentPlayer(тек. ход), то ничего не делаем\n\n    if (currentPlayer === \"computer\") {\n      const cell = generateRandomCompShot() as CellArgs; //рандомная ячейка компа\n\n      if (\n        cellIsEngaged({\n          cell,\n          engagedCells: playerShips! && playerShips.flat(),\n        })\n      ) {\n        //проверка есть ли в кликнутой ячейки корабль игрока\n        if (cellIsEngaged({ cell, engagedCells: sunkenShipsPlayer })) return; //если клик был уже по потопл кораблю игрока\n        sunkenShipsPlayer.push(cell);\n        setSunkenShipsPlayer([...sunkenShipsPlayer]); //если найден корабль противника то внесем его ячейку в потопленные\n        setCountPlayerShips(countPlayerShips! - 1); //отнимем коли-во кораблей противника\n        currentPlayer = \"computer\"; //ход остается\n      } else {\n        if (cellIsEngaged({ cell, engagedCells: pastCellsComp })) return; // если клик по уже пустой клетке\n        pastCellsComp.push(cell);\n        setPastCellsComp([...pastCellsComp]); // сохранить пустую клетку\n        currentPlayer = \"player\"; //т к ход мимо переход стрельбы\n      }\n    }\n  }, [\n    countPlayerShips,\n    countCompShips,\n    name,\n    pastCellsComp,\n    playerShips,\n    sunkenShipsPlayer,\n  ]);\n\n  useEffect(() => {\n    let localRef: HTMLCanvasElement | null = null;\n\n    const drawGrid = (context: CanvasRenderingContext2D) => {\n      //отрисовка сетки, краблей, клеток попадания, клеток мимо\n      context.clearRect(0, 0, size, size);\n      drawCells({ context, cellSize, dimMatr });\n\n      drawNameBoard(context, nameBoard); //отрисовка названия доски\n      drawLatterCoords(context, coords.letterCoords); //отрисовка координат букв доски\n      drawNumberCoords(context, coords.numberCoords); //отрисовка координат чисел доски\n      drawWhoWin(context, name, countCompShips, countPlayerShips); //who win\n      drawStatusShips(context, name, countCompShips, countPlayerShips); // кол-о к уничтож клеток\n\n      drawShips(context, cellSize, playerShips!); //отрисовка караблей\n      // drawShips(context, cellSize, compShips!); //временно отрис корабл компа!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n      drawSunkenShips(context, cellSize, sunkenShipsPlayer); //отрис потопл-х кораблей\n      drawSunkenShips(context, cellSize, sunkenShipsComp); //отрис потопл-х кораблей\n\n      drawPastCells(context, cellSize, pastCellsPlayer); //отрис клетки мимо игрока\n      drawPastCells(context, cellSize, pastCellsComp); //отрис клетки мимо компа\n    };\n\n    if (canvasRef.current) localRef = canvasRef.current;\n    const context: CanvasRenderingContext2D | null = localRef!.getContext(\"2d\");\n    drawGrid(context!);\n\n    currentPlayer === \"computer\" &&\n      canvasRef.current!.addEventListener(\"click\", handleComp);\n\n    return () => localRef?.removeEventListener(\"click\", handleComp);\n  }, [\n    sunkenShipsPlayer,\n    sunkenShipsComp,\n    pastCellsPlayer,\n    pastCellsComp,\n    handleComp,\n    playerShips,\n    compShips,\n  ]);\n\n  useEffect(() => {\n    if (gameIsFinished) {\n      setSunkenShipsPlayer([]);\n      setSunkenShipsComp([]);\n      setPastCellsPlayer([]);\n      setPastCellsComp([]);\n      setCountPlayerShips(allPlayerShips);\n      setCountCompShips(allCompShips);\n      currentPlayer = \"player\";\n      return;\n    }\n  }, [\n    sunkenShipsPlayer,\n    sunkenShipsComp,\n    pastCellsPlayer,\n    pastCellsComp,\n    gameIsFinished,\n    allCompShips,\n    allPlayerShips,\n  ]);\n\n  // кликнул игрок\n  const handleCellClick = (event: {\n    nativeEvent: { offsetX: number; offsetY: number };\n  }) => {\n    if (countCompShips === 0 || countPlayerShips === 0) return;\n    if (currentPlayer === name) return; //если текущий ход равен глобальному currentPlayer(тек. ход), то ничего не делаем\n\n    if (currentPlayer === \"player\") {\n      const { offsetX, offsetY } = event.nativeEvent; //определяется ячейка по которой кликнул игрок\n\n      if (offsetX >= 300 || offsetY >= 300) return; //выход за пределы при клике\n      const cell = getCell(offsetX, offsetY); //получил ячейку клика\n\n      if (cellIsEngaged({ cell, engagedCells: compShips!.flat() })) {\n        //проверка есть ли в кликнутой ячейки корабль компа\n        if (cellIsEngaged({ cell, engagedCells: sunkenShipsComp })) return; //если клик был уже по потопл кораблю компа\n\n        setSunkenShipsComp([...sunkenShipsComp, cell]); //если найден корабль противника то внесем его ячейку в потопленные\n        setCountCompShips(countCompShips! - 1); //отнимем коли-во кораблей противника\n        currentPlayer = \"player\"; // ход остается за игроком\n      } else {\n        if (cellIsEngaged({ cell, engagedCells: pastCellsPlayer })) return; // если клик по уже пустой клетке\n        setPastCellsPlayer([...pastCellsPlayer, cell]); // сохранить пустую клетку\n        currentPlayer = \"computer\"; // т к ход мимо переход стрельбы к компу\n      }\n    }\n  };\n\n  useEffect(\n    //изменения частоты клика компа\n    () => {\n      if (countPlayerShips && countPlayerShips < 8 && countPlayerShips >= 6)\n        timeClickComp = 500;\n      if (countPlayerShips && countPlayerShips < 6 && countPlayerShips >= 4)\n        timeClickComp = 300;\n      if (countPlayerShips && countPlayerShips < 4 && countPlayerShips >= 2)\n        timeClickComp = 100;\n      if (countPlayerShips && countPlayerShips < 2) timeClickComp = 50;\n    },\n    [countPlayerShips]\n  );\n\n  useEffect(\n    //вызов клика компа\n    () => {\n      const id = setInterval(handleComp, timeClickComp);\n      return () => clearInterval(id);\n    },\n    [handleComp]\n  );\n\n  return (\n    <>\n      <canvas\n        ref={canvasRef}\n        style={\n          name === \"computer\"\n            ? { cursor: \"crosshair\", margin: \"0 3rem .1rem 0\" }\n            : { cursor: \"progress\", marginBottom: \".1rem\" }\n        }\n        width={canvasWidth * scaleBoard}\n        height={canvasHeight * scaleBoard}\n        onClick={handleCellClick}\n      />\n    </>\n  );\n};\n\nexport default memo(Board);\n","import { useState, useMemo, ReactElement, useEffect } from \"react\";\nimport { buttonStyles, game, gameBoard, wrapButton, wrapShip } from \"./styles\";\nimport { Container, Button, Box, Typography } from \"@mui/material\";\nimport cell1 from \"../Game/assets/cell1.svg\";\nimport cell2 from \"../Game/assets/cell2.svg\";\nimport cell3 from \"../Game/assets/cell3.svg\";\n\nimport {\n  generateShipsLayout,\n  shipsSet,\n  dimMatr,\n  generateCoords,\n  checkShipsLength3,\n} from \"./helper\";\n\nimport Board from \"./Board\";\nimport { CellArgs } from \"./types\";\n\nconst Game = (): ReactElement => {\n  const [playerShips, setPlayerShips] = useState<CellArgs[][]>(\n    generateShipsLayout(shipsSet, dimMatr)\n  ); //создание корабликов\n  const [compShips, setCompShips] = useState<CellArgs[][]>(\n    generateShipsLayout(shipsSet, dimMatr)\n  ); //создание корабликов\n  const [gameIsFinished, setGameIsFinished] = useState<boolean>(false); //окончание игры\n\n  const coords = useMemo(() => generateCoords(dimMatr), []);\n\n  const restartGame = () => {\n    //перезапуск\n    document.location.reload();\n    setPlayerShips(generateShipsLayout(shipsSet, dimMatr));\n    setCompShips(generateShipsLayout(shipsSet, dimMatr));\n    setGameIsFinished((prevGameIsFinished) => !prevGameIsFinished);\n  };\n\n  useEffect(() => {\n    if (checkShipsLength3(compShips)) {\n      setCompShips(generateShipsLayout(shipsSet, dimMatr));\n    }\n  }, [compShips]);\n\n  useEffect(() => {\n    if (checkShipsLength3(playerShips)) {\n      setPlayerShips(generateShipsLayout(shipsSet, dimMatr));\n    }\n  }, [playerShips]);\n\n  return (\n    <>\n      <Container sx={{ ...game }}>\n        <Box sx={{ ...gameBoard }}>\n          <Board\n            name=\"computer\"\n            nameBoard=\"поиск кораблей противника\"\n            compShips={compShips}\n            gameIsFinished={gameIsFinished}\n            coords={coords}\n          />\n          <Board\n            name=\"player\"\n            nameBoard=\"расположение моих кораблей\"\n            playerShips={playerShips}\n            gameIsFinished={gameIsFinished}\n            coords={coords}\n          />\n          <Box sx={{ ...wrapButton }}>\n            <Box sx={{ ...wrapShip }}>\n              <Box sx={{ display: \"flex\", margin: \"1rem 0\" }}>\n                <Box\n                  component=\"img\"\n                  src={cell1}\n                  alt=\"лодка\"\n                  sx={{ maxWidth: \"4rem\" }}\n                />\n                <Typography\n                  component=\"p\"\n                  sx={{\n                    textAlign: \"center\",\n                    marginBottom: \"1rem\",\n                  }}\n                >\n                  одноклеточных по 3 штуки\n                </Typography>\n              </Box>\n              <Box sx={{ display: \"flex\", marginBottom: \"1rem\" }}>\n                <Box\n                  component=\"img\"\n                  src={cell2}\n                  alt=\"яхта\"\n                  sx={{ maxWidth: \"4rem\" }}\n                />\n                <Typography\n                  component=\"p\"\n                  sx={{\n                    textAlign: \"center\",\n                    marginBottom: \"1rem\",\n                  }}\n                >\n                  двухклеточных по 2 штуки\n                </Typography>\n              </Box>\n              <Box sx={{ display: \"flex\" }}>\n                <Box\n                  component=\"img\"\n                  src={cell3}\n                  alt=\"фрегат\"\n                  sx={{ maxWidth: \"4rem\" }}\n                />\n                <Typography\n                  component=\"p\"\n                  sx={{\n                    textAlign: \"center\",\n                    marginBottom: \"1rem\",\n                  }}\n                >\n                  трехклеточных по 1 штуки\n                </Typography>\n              </Box>\n            </Box>\n            <Button\n              onClick={restartGame}\n              variant=\"contained\"\n              sx={{ ...buttonStyles, margin: \"3rem 0\" }}\n            >\n              Играть снова\n            </Button>\n          </Box>\n        </Box>\n      </Container>\n    </>\n  );\n};\n\nexport default Game;\n","import Game from \"./сomponents/Game/GamePlay\"\n\nfunction App() {\n  return (\n    <>\n      <div className=\"wrap\">\n        <Game />\n      </div>\n    </>\n\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport { render } from \"react-dom\";\n\nimport App from './App';\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);"],"sourceRoot":""}